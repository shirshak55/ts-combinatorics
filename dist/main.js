"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CartesianProduct = exports.PowerSet = exports.BaseN = exports.Combination = exports.Permutation = exports.randomInteger = exports.combinadic = exports.factoradic = exports.factorial = exports.combination = exports.permutation = exports.version = void 0;
exports.version = "1.4.5";
const _BI = typeof BigInt == "function" ? BigInt : Number;
const _crop = (n) => (n <= Number.MAX_SAFE_INTEGER ? Number(n) : _BI(n));
function permutation(n, k) {
    if (n < 0)
        throw new RangeError(`negative n is not acceptable`);
    if (k < 0)
        throw new RangeError(`negative k is not acceptable`);
    if (0 == k)
        return 1;
    if (n < k)
        return 0;
    [n, k] = [_BI(n), _BI(k)];
    let p = _BI(1);
    while (k--)
        p *= n--;
    return _crop(p);
}
exports.permutation = permutation;
function combination(n, k) {
    if (0 == k)
        return 1;
    if (n == k)
        return 1;
    if (n < k)
        return 0;
    const P = permutation;
    const c = _BI(P(n, k)) / _BI(P(k, k));
    return _crop(c);
}
exports.combination = combination;
function factorial(n) {
    return permutation(n, n);
}
exports.factorial = factorial;
function factoradic(n, l = 0) {
    if (n < 0)
        return undefined;
    let [bn, bf] = [_BI(n), _BI(1)];
    if (!l) {
        for (l = 1; bf < bn; bf *= _BI(++l))
            ;
        if (bn < bf)
            bf /= _BI(l--);
    }
    else {
        bf = _BI(factorial(l));
    }
    let digits = [0];
    for (; l; bf /= _BI(l--)) {
        digits[l] = Math.floor(Number(bn / bf));
        bn %= bf;
    }
    return digits;
}
exports.factoradic = factoradic;
function combinadic(n, k) {
    const count = combination(n, k);
    return (m) => {
        if (m < 0 || count <= m)
            return undefined;
        let digits = [];
        let [a, b] = [n, k];
        let x = _BI(count) - _BI(1) - _BI(m);
        for (let i = 0; i < k; i++) {
            a--;
            while (x < combination(a, b))
                a--;
            digits.push(n - 1 - a);
            x -= _BI(combination(a, b));
            b--;
        }
        return digits;
    };
}
exports.combinadic = combinadic;
const _crypto = typeof crypto !== "undefined" ? crypto : {};
const _randomBytes = typeof _crypto["randomBytes"] === "function"
    ? (len) => Uint8Array.from(_crypto["randomBytes"](len))
    : typeof _crypto["getRandomValues"] === "function"
        ? (len) => _crypto["getRandomValues"](new Uint8Array(len))
        : (len) => Uint8Array.from(Array(len), () => Math.random() * 256);
function randomInteger(min = 0, max = Math.pow(2, 53)) {
    let ctor = min.constructor;
    if (arguments.length === 0) {
        return Math.floor(Math.random() * ctor(max));
    }
    if (arguments.length == 1) {
        ;
        [min, max] = [ctor(0), min];
    }
    if (typeof min == "number") {
        ;
        [min, max] = [Math.ceil(Number(min)), Math.ceil(Number(max))];
        return Math.floor(Math.random() * (max - min)) + min;
    }
    const mag = ctor(max) - ctor(min);
    const len = mag.toString(16).length;
    const u8s = _randomBytes(len);
    const rnd = u8s.reduce((a, v) => (a << ctor(8)) + ctor(v), ctor(0));
    return ((ctor(rnd) * mag) >> ctor(len * 8)) + ctor(min);
}
exports.randomInteger = randomInteger;
class _CBase {
    static of(...args) {
        return new (Function.prototype.bind.apply(this, [null].concat(args)))();
    }
    static from(arg) {
        return new (Function.prototype.bind.apply(this, [null].concat(arg)))();
    }
    [Symbol.iterator]() {
        return (function* (it, len) {
            for (let i = 0; i < len; i++)
                yield it.nth(i);
        })(this, this.length);
    }
    toArray() {
        return [...this];
    }
    get isBig() {
        return Number.MAX_SAFE_INTEGER < this.length;
    }
    get isSafe() {
        return typeof BigInt !== "undefined" || !this.isBig;
    }
    _check(n) {
        if (n < 0) {
            if (this.length < -n)
                return undefined;
            return _crop(_BI(this.length) + _BI(n));
        }
        if (this.length <= n)
            return undefined;
        return n;
    }
    nth(n) {
        return [];
    }
    sample() {
        return this.nth(randomInteger(this.length));
    }
    samples() {
        return (function* (it) {
            while (true)
                yield it.sample();
        })(this);
    }
}
class Permutation extends _CBase {
    constructor(seed, size = 0) {
        super();
        this.seed = [...seed];
        this.size = 0 < size ? size : this.seed.length;
        this.length = permutation(this.seed.length, this.size);
        Object.freeze(this);
    }
    nth(n) {
        n = this._check(n);
        if (n === undefined)
            return undefined;
        const offset = this.seed.length - this.size;
        const skip = factorial(offset);
        let digits = factoradic(_BI(n) * _BI(skip), this.seed.length);
        let source = this.seed.slice();
        let result = [];
        for (let i = this.seed.length - 1; offset <= i; i--) {
            result.push(source.splice(digits[i], 1)[0]);
        }
        return result;
    }
}
exports.Permutation = Permutation;
class Combination extends _CBase {
    constructor(seed, size = 0) {
        super();
        this.seed = [...seed];
        this.size = 0 < size ? size : this.seed.length;
        this.size = size;
        this.length = combination(this.seed.length, this.size);
        this.comb = combinadic(this.seed.length, this.size);
        Object.freeze(this);
    }
    bitwiseIterator() {
        const ctor = this.length.constructor;
        const [zero, one, two] = [ctor(0), ctor(1), ctor(2)];
        const inc = (x) => {
            const u = x & -x;
            const v = u + x;
            return v + (((v ^ x) / u) >> two);
        };
        let x = (one << ctor(this.size)) - one;
        return (function* (it, len) {
            for (let i = 0; i < len; i++, x = inc(x)) {
                var result = [];
                for (let y = x, j = 0; zero < y; y >>= one, j++) {
                    if (y & one)
                        result.push(it.seed[j]);
                }
                yield result;
            }
        })(this, this.length);
    }
    nth(n) {
        n = this._check(n);
        if (n === undefined)
            return undefined;
        return this.comb(n).reduce((a, v) => a.concat(this.seed[v]), []);
    }
}
exports.Combination = Combination;
class BaseN extends _CBase {
    constructor(seed, size = 1) {
        super();
        this.seed = [...seed];
        this.size = size;
        let base = this.seed.length;
        this.base = base;
        let length = size < 1
            ? 0
            : Array(size)
                .fill(_BI(base))
                .reduce((a, v) => a * v);
        this.length = _crop(length);
        Object.freeze(this);
    }
    nth(n) {
        n = this._check(n);
        if (n === undefined)
            return undefined;
        let bn = _BI(n);
        const bb = _BI(this.base);
        let result = [];
        for (let i = 0; i < this.size; i++) {
            var bd = bn % bb;
            result.push(this.seed[Number(bd)]);
            bn -= bd;
            bn /= bb;
        }
        return result;
    }
}
exports.BaseN = BaseN;
class PowerSet extends _CBase {
    constructor(seed) {
        super();
        this.seed = [...seed];
        const length = _BI(1) << _BI(this.seed.length);
        this.length = _crop(length);
        Object.freeze(this);
    }
    nth(n) {
        n = this._check(n);
        if (n === undefined)
            return undefined;
        let bn = _BI(n);
        let result = [];
        for (let bi = _BI(0); bn; bn >>= _BI(1), bi++)
            if (bn & _BI(1))
                result.push(this.seed[Number(bi)]);
        return result;
    }
}
exports.PowerSet = PowerSet;
class CartesianProduct extends _CBase {
    constructor(...args) {
        super();
        this.seed = args.map((v) => [...v]);
        this.size = this.seed.length;
        const length = this.seed.reduce((a, v) => a * _BI(v.length), _BI(1));
        this.length = _crop(length);
        Object.freeze(this);
    }
    nth(n) {
        n = this._check(n);
        if (n === undefined)
            return undefined;
        let bn = _BI(n);
        let result = [];
        for (let i = 0; i < this.size; i++) {
            const base = this.seed[i].length;
            const bb = _BI(base);
            const bd = bn % bb;
            result.push(this.seed[i][Number(bd)]);
            bn -= bd;
            bn /= bb;
        }
        return result;
    }
}
exports.CartesianProduct = CartesianProduct;
//# sourceMappingURL=data:application/json;base64,